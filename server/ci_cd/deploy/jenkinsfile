pipeline {
    agent any

    stages {
        stage('Prepare .env File') {
            steps {
                withCredentials([
                    string(credentialsId: 'HOST', variable: 'HOST'),
                    string(credentialsId: 'PORT', variable: 'PORT'),
                    string(credentialsId: 'DB_DRIVER', variable: 'DB_DRIVER'),
                    string(credentialsId: 'DB_USER', variable: 'DB_USER'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                    string(credentialsId: 'DB_HOST', variable: 'DB_HOST'),
                    string(credentialsId: 'DB_PORT', variable: 'DB_PORT'),
                    string(credentialsId: 'DB_NAME', variable: 'DB_NAME'),
                    string(credentialsId: 'DB_SSL_MODE', variable: 'DB_SSL_MODE'),
                    string(credentialsId: 'APP_ENV', variable: 'APP_ENV'),
                    string(credentialsId: 'LOG_LEVEL', variable: 'LOG_LEVEL')
                ]) {
                    sh '''
                        cat <<EOF > server/.env
                        HOST=${HOST}
                        PORT=${PORT}
                        DB_DRIVER=${DB_DRIVER}
                        DB_USER=${DB_USER}
                        DB_PASSWORD=${DB_PASSWORD}
                        DB_HOST=${DB_HOST}
                        DB_PORT=${DB_PORT}
                        DB_NAME=${DB_NAME}
                        DB_SSL_MODE=${DB_SSL_MODE}
                        APP_ENV=${APP_ENV}
                        LOG_LEVEL=${LOG_LEVEL}
                        EOF
                    '''
                }
            }
        }

        stage('Build Image') {
            steps {
                sh "chmod +x server/ci_cd/deploy/scripts/001_docker_build.sh"
                sh "server/ci_cd/deploy/scripts/001_docker_build.sh ${env.BUILD_NUMBER}"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Get the job name and build number
                    def jobName = env.JOB_NAME
                    def buildNumber = env.BUILD_NUMBER

                    withCredentials([usernamePassword(credentialsId: '844bc746-c1af-475a-8a83-bfacc603449f', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "chmod +x server/ci_cd/deploy/scripts/002_docker_push.sh"
                        sh "server/ci_cd/deploy/scripts/002_docker_push.sh $buildNumber"
                    }
                    echo "Build Completed - Job Name: $jobName  --  Build Number: $buildNumber"
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying application using docker-compose...'
                sh "docker-compose -f server/docker-compose.yaml pull"
                sh "docker-compose -f server/docker-compose.yaml up -d"
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            sh 'rm -f server/.env'
        }
    }
}
