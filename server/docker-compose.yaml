services:
  app:
    build:
      context: .
      target: ${GO_ENV}
    container_name: golang-react-todo-app
    env_file:
      - ./.env
    environment:
      PORT: ${PORT}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
    ports:
      - "8000:8000"
    depends_on:
      goose:
        condition: service_completed_successfully
    networks:
      - golang-react-todo-app-network

  postgres:
    image: postgres:bookworm
    restart: always
    container_name: golang-react-todo-app-db
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [CMD-SHELL, "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - golang-react-todo-app-network

  goose:
    build:
      context: .
      dockerfile: ./pkg/sql/schema/goose_docker_config/Dockerfile
    container_name: golang-react-todo-app-goose
    env_file:
      - ./.env
    environment:
      DB_DRIVER: ${DB_DRIVER}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - golang-react-todo-app-network

volumes:
  pg-data:

networks:
  golang-react-todo-app-network:

